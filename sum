(define sum (lambda (list)

;         (display list) ;Displays list for testing purposes.

(cond
 ;Checks to see if list is empty
  ((null? list) #f)
  
  ;Checks to see if the cdr is empty to stop comparing Returns #f if empty.
  ((null? (cdr list)) #f)
  
  ;Adds car and the car of cdr together. Returns #t if the sum is zero.
  ((= 0 (+ (car list) (car(cdr list)))) #t)
  
  ;Returns the list with first value missing.
  ((sum(cdr list)))
  
  ;Returns the list with second value missing.
  (else (sum (cons (car list) (cdr(cdr list)))))
  
  )))
